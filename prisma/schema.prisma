// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id            String  @id @db.Uuid
  email         String  @unique
  name          String?
  rounds        Round[]
  holes         Hole[]
  handicapIndex Float
}

model Course {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  nineHolePar     Int
  eighteenHolePar Int
  courseRating    Float
  slopeRating     Float
  rounds          Round[]
}

model Hole {
  id         Int     @id @default(autoincrement())
  par        Int
  holeNumber Int
  hcp        Int
  strokes    Int
  roundId    Int
  round      Round   @relation(fields: [roundId], references: [id], onDelete: Cascade)
  userId     String  @db.Uuid
  user       Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Round {
  id                    Int      @id @default(autoincrement())
  holes                 Hole[]
  teeTime               DateTime
  courseId              Int
  course                Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId                String   @db.Uuid
  user                  Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  existingHandicapIndex Float
  updatedHandicapIndex  Float    @default(0)
  scoreDifferential     Float
  totalStrokes          Int
  adjustedGrossScore    Int
  createdAt             DateTime @default(now())
  parPlayed             Int
  notes                 String?
}
